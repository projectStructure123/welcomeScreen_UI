import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:untitled8/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onErrorContainer.withOpacity(1),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27),
          ),
          shadowColor: appTheme.blueGray100.withOpacity(0.25),
          elevation: 17,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.surface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray5001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: appTheme.gray400,
      fontSize: 17,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.black900,
      fontSize: 14,
      fontFamily: 'Noto Sans Arabic',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.blueGray10001,
      fontSize: 12,
      fontFamily: 'Cairo',
      fontWeight: FontWeight.w400,
    ),
    displayLarge: TextStyle(
      color: Color(0XFF720D83),
      fontSize: 55,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),
    displayMedium: TextStyle(
      color: Color(0XFF272D2F),
      fontSize: 45,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),
    displaySmall: TextStyle(
      color: appTheme.black900,
      fontSize: 36,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w500,
    ),
    headlineLarge: TextStyle(
      color: appTheme.blueGray900,
      fontSize: 30,
      fontFamily: 'Noto Sans Arabic',
      fontWeight: FontWeight.w700,
    ),
    headlineMedium: TextStyle(
      color: colorScheme.primary,
      fontSize: 27,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    headlineSmall: TextStyle(
      color: appTheme.black900,
      fontSize: 25,
      fontFamily: 'SF Pro Display',
      fontWeight: FontWeight.w400,
    ),
    labelLarge: TextStyle(
      color: colorScheme.primary,
      fontSize: 13,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w500,
    ),
    labelMedium: TextStyle(
      color: appTheme.black900,
      fontSize: 10,
      fontFamily: 'SF Pro Text',
      fontWeight: FontWeight.w700,
    ),
    labelSmall: TextStyle(
      color: colorScheme.onErrorContainer.withOpacity(1),
      fontSize: 8,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w500,
    ),
    titleLarge: TextStyle(
      color: appTheme.blueGray90001,
      fontSize: 22,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w700,
    ),
    titleMedium: TextStyle(
      color: colorScheme.primary,
      fontSize: 16,
      fontFamily: 'Noto Sans Arabic',
      fontWeight: FontWeight.w700,
    ),
    titleSmall: TextStyle(
      color: appTheme.black900,
      fontSize: 15,
      fontFamily: 'Noto Sans Arabic',
      fontWeight: FontWeight.w600,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF720D83),
    primaryContainer: Color(0XFF989CA2),

    // Error colors
    errorContainer: Color(0X1E3F4B5E),
    onErrorContainer: Color(0XF2FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFEEEEEE),
    onPrimaryContainer: Color(0XFF111719),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFC529);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blueA400 => Color(0XFF1877F2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD3D1D8);
  Color get blueGray10001 => Color(0XFFD0D0D0);
  Color get blueGray10002 => Color(0XFFD0D2D1);
  Color get blueGray300 => Color(0XFF9A9FB3);
  Color get blueGray400 => Color(0XFF8B8A9D);
  Color get blueGray40001 => Color(0XFF8B9099);
  Color get blueGray40002 => Color(0XFF848688);
  Color get blueGray40003 => Color(0XFF767F9D);
  Color get blueGray40004 => Color(0XFF858891);
  Color get blueGray50 => Color(0XFFEEF0F2);
  Color get blueGray5001 => Color(0XFFF1F1F3);
  Color get blueGray5002 => Color(0XFFF1F1F1);
  Color get blueGray70000 => Color(0X00494D62);
  Color get blueGray900 => Color(0XFF313642);
  Color get blueGray90001 => Color(0XFF323643);

  // BlueGrayf
  Color get blueGray507f => Color(0X7FE9EDF2);

  // DeepOrange
  Color get deepOrange40033 => Color(0X33FE724C);
  Color get deepOrangeA400 => Color(0XFFFF3600);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20001 => Color(0XFFEFEFEF);
  Color get gray300 => Color(0XFFE2E0E0);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFB3B3B3);
  Color get gray50 => Color(0XFFFBFCFC);
  Color get gray500 => Color(0XFF9796A1);
  Color get gray600 => Color(0XFF848486);
  Color get gray700 => Color(0XFF5B5B5E);
  Color get gray800 => Color(0XFF3F3131);
  Color get gray80001 => Color(0XFF46224C);
  Color get gray80002 => Color(0XFF3F434A);
  Color get gray900 => Color(0XFF191B2E);

  // Grayf
  Color get gray2003f => Color(0X3FE8E8E8);

  // Green
  Color get greenA70035 => Color(0X350DB027);

  // Indigo
  Color get indigo30028 => Color(0X287A80BE);

  // LightGreenE
  Color get lightGreen100E5 => Color(0XE5E0DBC4);

  // Purple
  Color get purple400 => Color(0XFFC043D5);
  Color get purpleA200 => Color(0XFFD627F3);
  Color get purpleA400 => Color(0XFFC81AE5);

  // Red
  Color get red500 => Color(0XFFEA4335);

  // RedB
  Color get red900B2 => Color(0XB2A11B31);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
